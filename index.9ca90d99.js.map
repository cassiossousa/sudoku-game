{"mappings":"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","sources":["<anon>","src/index.js","src/game/index.js","src/game/sudoku-game.js","src/sudoku/index.js","src/sudoku/sudoku.js","src/sudoku/tile.js"],"sourcesContent":["class $710399a0f3bd0a12$export$2e2bcd8739ae039 {\n    /**\n   * @param {number} row\n   * @param {number} col\n   * @param {number} value\n   */ constructor(row, col, value){\n        this.row = row;\n        this.col = col;\n        this.value = value;\n        this.element = null;\n        this.pencilMarks = [];\n    }\n    render() {\n        const tileEl = document.createElement('div');\n        tileEl.classList.add('tile');\n        if (this.value) tileEl.textContent = this.value;\n        this.element = tileEl;\n        return tileEl;\n    }\n}\n\n\nclass $043f643f06a810b4$export$2e2bcd8739ae039 {\n    /**\n   * @param {HTMLElement} element\n   * @param {number[][]} initialValues\n   */ constructor(element){\n        this.element = element;\n        this.board = Array.from({\n            length: 9\n        }, ()=>Array(9).fill(null));\n    }\n    /**\n   * Restarts the Sudoku board with the given initial values.\n   *\n   * @param {number[][]} initialValues\n   */ restart(initialValues) {\n        this.board = Array.from({\n            length: 9\n        }, ()=>Array(9).fill(null));\n        for(let row = 0; row < 9; row++)for(let col = 0; col < 9; col++){\n            let tile;\n            if (initialValues && initialValues[row] && initialValues[row][col]) tile = new (0, $710399a0f3bd0a12$export$2e2bcd8739ae039)(row, col, initialValues[row][col]);\n            else tile = new (0, $710399a0f3bd0a12$export$2e2bcd8739ae039)(row, col, null);\n            this.board[row][col] = tile;\n        }\n    }\n    render() {\n        const boardDiv = document.createElement('div');\n        boardDiv.classList.add('board');\n        // First, we generate divs for each 3x3 box.\n        for(let boardRow = 0; boardRow < 3; boardRow++){\n            const boardRowDiv = document.createElement('div');\n            boardRowDiv.classList.add('board-row');\n            boardDiv.appendChild(boardRowDiv);\n            for(let boardCol = 0; boardCol < 3; boardCol++){\n                const boxDiv = document.createElement('div');\n                boxDiv.classList.add('box');\n                boardRowDiv.appendChild(boxDiv);\n                // Then we generate the 9 tiles inside each 3x3 box.\n                for(let boxRow = 0; boxRow < 3; boxRow++){\n                    const boxRowDiv = document.createElement('div');\n                    boxRowDiv.classList.add('box-row');\n                    boxDiv.appendChild(boxRowDiv);\n                    for(let boxCol = 0; boxCol < 3; boxCol++){\n                        const row = 3 * boardRow + boxRow;\n                        const col = 3 * boardCol + boxCol;\n                        const tileDiv = this.board[row][col].render();\n                        boxRowDiv.appendChild(tileDiv);\n                    }\n                }\n            }\n        }\n        return boardDiv;\n    }\n    update() {\n        const newBoard = this.render();\n        const parentElement = this.element.parentNode;\n        parentElement.removeChild(this.element);\n        this.element = newBoard;\n        parentElement.appendChild(this.element);\n    }\n}\n\n\n\n\n\nclass $0acef5f7b2cfc8ea$export$2e2bcd8739ae039 {\n    constructor(boardElement, initialValues){\n        this.boardElement = boardElement;\n        this.initialValues = initialValues;\n        this.sudoku = null;\n        this.activeTileRow = null;\n        this.activeTileCol = null;\n        this.keypadEl = document && document.querySelector('div.keypad');\n    }\n    start() {\n        this.sudoku = new (0, $043f643f06a810b4$export$2e2bcd8739ae039)(this.boardElement);\n        this.sudoku.restart(this.initialValues);\n        this.updateSudoku();\n        this.addListenersToKeypad();\n    }\n    updateSudoku() {\n        this.sudoku.update();\n        this.addListenersAndValidatorsToSudokuTiles();\n    }\n    addListenersAndValidatorsToSudokuTiles() {\n        for(let row = 0; row < 9; row++)for(let col = 0; col < 9; col++){\n            const tile = this.sudoku.board[row][col];\n            if (this.isInitial(tile)) tile.element.classList.add('initial');\n            else tile.element.addEventListener('click', ()=>this.toggleActivateTile(tile));\n            if (tile.value !== null && !this.isValidMove(row, col, tile.value)) tile.element.classList.add('invalid');\n        }\n    }\n    isInitial(tile) {\n        return Boolean(tile && tile.value && this.initialValues[tile.row][tile.col] === tile.value);\n    }\n    /**\n   * If not active, activates the clicked tile for keyboard input.\n   * Otherwise, deactivates the keyboard event listeners.\n   *\n   * @param {Tile} tile\n   */ toggleActivateTile(tile) {\n        if (this.activeTileRow === tile.row && this.activeTileCol === tile.col) {\n            tile.element.classList.remove('active');\n            this.activeTileRow = null;\n            this.activeTileCol = null;\n            this.keypadEl.classList.add('hidden');\n        } else {\n            this.deactivateTile();\n            tile.element.classList.add('active');\n            this.activeTileRow = tile.row;\n            this.activeTileCol = tile.col;\n            if (this.keypadEl) {\n                const rect = tile.element.getBoundingClientRect();\n                this.repositionKeypad(rect, this.activeTileRow, this.activeTileCol);\n                this.keypadEl.classList.remove('hidden');\n            }\n        }\n    }\n    deactivateTile() {\n        if (this.activeTileRow === null || this.activeTileCol === null) return;\n        const activeTile = this.sudoku.board[this.activeTileRow][this.activeTileCol];\n        activeTile.element.classList.remove('active');\n        this.activeTileRow = null;\n        this.activeTileCol = null;\n    }\n    addListenersToKeypad() {\n        if (!this.keypadEl) return;\n        this.keypadEl.addEventListener('click', (e)=>{\n            if (this.activeTileRow === null || this.activeTileCol === null) return;\n            const activeTile = this.sudoku.board[this.activeTileRow][this.activeTileCol];\n            const key = e.target.dataset.key;\n            if (key === 'clear') activeTile.value = null;\n            else if (key) activeTile.value = parseInt(key, 10);\n            // Hide keypad after selection\n            this.keypadEl.classList.add('hidden');\n            this.deactivateTile();\n            this.updateSudoku();\n        });\n        if (!document) return;\n        document.addEventListener('click', (e)=>{\n            if (!e.target.closest('div.tile') && !e.target.closest('div.keypad')) {\n                this.keypadEl.classList.add('hidden');\n                this.deactivateTile();\n            }\n        });\n    }\n    /**\n   * @param {DOMRect} rect\n   * @param {number} activeTileRow\n   * @param {number} activeTileCol\n   */ repositionKeypad(rect, activeTileRow, activeTileCol) {\n        if (!this.keypadEl) return;\n        if (activeTileRow < 4) this.keypadEl.style.top = `${rect.top + rect.height / 2.0 + window.scrollY}px`;\n        else this.keypadEl.style.top = `${rect.bottom - rect.height / 2.0 + window.scrollY - this.keypadEl.clientHeight}px`;\n        if (activeTileCol < 4) this.keypadEl.style.left = `${rect.right - rect.width / 2.0 + window.scrollX}px`;\n        else this.keypadEl.style.left = `${rect.left + rect.width / 2.0 + window.scrollX - this.keypadEl.clientWidth}px`;\n    }\n    /**\n   * Checks if a tile can be filled with a given value.\n   *\n   * @param {number} row\n   * @param {number} col\n   * @param {number} value\n   */ isValidMove(row, col, value) {\n        const board = this.sudoku.board;\n        // Check row\n        for(let c = 0; c < 9; c++){\n            if (board[row][c].value === value && c !== col) return false;\n        }\n        // Check column\n        for(let r = 0; r < 9; r++){\n            if (board[r][col].value === value && r !== row) return false;\n        }\n        // Check 3x3 box\n        const startRow = 3 * Math.floor(row / 3);\n        const startCol = 3 * Math.floor(col / 3);\n        for(let r = startRow; r < startRow + 3; r++)for(let c = startCol; c < startCol + 3; c++){\n            if (board[r][c].value === value && r !== row && c !== col) return false;\n        }\n        return true;\n    }\n}\n\n\n\n\nconst $35da740d59af89ba$var$game = new (0, $0acef5f7b2cfc8ea$export$2e2bcd8739ae039)(document.querySelector('.board'), [\n    [\n        0,\n        0,\n        0,\n        3,\n        8,\n        0,\n        0,\n        5,\n        6\n    ],\n    [\n        3,\n        0,\n        0,\n        0,\n        0,\n        6,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0,\n        4,\n        0,\n        0,\n        3,\n        0\n    ],\n    [\n        8,\n        0,\n        7,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1\n    ],\n    [\n        0,\n        0,\n        1,\n        0,\n        7,\n        0,\n        9,\n        0,\n        0\n    ],\n    [\n        9,\n        0,\n        0,\n        0,\n        0,\n        0,\n        2,\n        0,\n        4\n    ],\n    [\n        0,\n        7,\n        0,\n        0,\n        9,\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        4,\n        0,\n        0,\n        0,\n        0,\n        3\n    ],\n    [\n        1,\n        4,\n        0,\n        0,\n        2,\n        5,\n        0,\n        0,\n        0\n    ]\n]);\n$35da740d59af89ba$var$game.start();\n\n\n//# sourceMappingURL=index.9ca90d99.js.map\n","import { SudokuGame } from './game';\n\nconst game = new SudokuGame(document.querySelector('.board'), [\n  [0, 0, 0, 3, 8, 0, 0, 5, 6],\n  [3, 0, 0, 0, 0, 6, 0, 0, 0],\n  [0, 0, 0, 0, 4, 0, 0, 3, 0],\n  [8, 0, 7, 0, 0, 0, 0, 0, 1],\n  [0, 0, 1, 0, 7, 0, 9, 0, 0],\n  [9, 0, 0, 0, 0, 0, 2, 0, 4],\n  [0, 7, 0, 0, 9, 0, 0, 0, 0],\n  [0, 0, 0, 4, 0, 0, 0, 0, 3],\n  [1, 4, 0, 0, 2, 5, 0, 0, 0],\n]);\n\ngame.start();\n","export { default as SudokuGame } from './sudoku-game.js';\n","import { Sudoku, Tile } from '../sudoku';\n\nexport default class SudokuGame {\n  constructor(boardElement, initialValues) {\n    this.boardElement = boardElement;\n    this.initialValues = initialValues;\n    this.sudoku = null;\n    this.activeTileRow = null;\n    this.activeTileCol = null;\n    this.keypadEl = document && document.querySelector('div.keypad');\n  }\n\n  start() {\n    this.sudoku = new Sudoku(this.boardElement);\n    this.sudoku.restart(this.initialValues);\n    this.updateSudoku();\n    this.addListenersToKeypad();\n  }\n\n  updateSudoku() {\n    this.sudoku.update();\n    this.addListenersAndValidatorsToSudokuTiles();\n  }\n\n  addListenersAndValidatorsToSudokuTiles() {\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        const tile = this.sudoku.board[row][col];\n\n        if (this.isInitial(tile)) {\n          tile.element.classList.add('initial');\n        } else {\n          tile.element.addEventListener('click', () => this.toggleActivateTile(tile));\n        }\n\n        if (tile.value !== null && !this.isValidMove(row, col, tile.value)) {\n          tile.element.classList.add('invalid');\n        }\n      }\n    }\n  }\n\n  isInitial(tile) {\n    return Boolean(tile && tile.value && this.initialValues[tile.row][tile.col] === tile.value);\n  }\n\n  /**\n   * If not active, activates the clicked tile for keyboard input.\n   * Otherwise, deactivates the keyboard event listeners.\n   *\n   * @param {Tile} tile\n   */\n  toggleActivateTile(tile) {\n    if (this.activeTileRow === tile.row && this.activeTileCol === tile.col) {\n      tile.element.classList.remove('active');\n      this.activeTileRow = null;\n      this.activeTileCol = null;\n      this.keypadEl.classList.add('hidden');\n    } else {\n      this.deactivateTile();\n\n      tile.element.classList.add('active');\n      this.activeTileRow = tile.row;\n      this.activeTileCol = tile.col;\n\n      if (this.keypadEl) {\n        const rect = tile.element.getBoundingClientRect();\n        this.repositionKeypad(rect, this.activeTileRow, this.activeTileCol);\n        this.keypadEl.classList.remove('hidden');\n      }\n    }\n  }\n\n  deactivateTile() {\n    if (this.activeTileRow === null || this.activeTileCol === null) return;\n    const activeTile = this.sudoku.board[this.activeTileRow][this.activeTileCol];\n    activeTile.element.classList.remove('active');\n    this.activeTileRow = null;\n    this.activeTileCol = null;\n  }\n\n  addListenersToKeypad() {\n    if (!this.keypadEl) return;\n\n    this.keypadEl.addEventListener('click', (e) => {\n      if (this.activeTileRow === null || this.activeTileCol === null) return;\n\n      const activeTile = this.sudoku.board[this.activeTileRow][this.activeTileCol];\n      const key = e.target.dataset.key;\n\n      if (key === 'clear') {\n        activeTile.value = null;\n      } else if (key) {\n        activeTile.value = parseInt(key, 10);\n      }\n\n      // Hide keypad after selection\n      this.keypadEl.classList.add('hidden');\n      this.deactivateTile();\n      this.updateSudoku();\n    });\n\n    if (!document) return;\n\n    document.addEventListener('click', (e) => {\n      if (!e.target.closest('div.tile') && !e.target.closest('div.keypad')) {\n        this.keypadEl.classList.add('hidden');\n        this.deactivateTile();\n      }\n    });\n  }\n\n  /**\n   * @param {DOMRect} rect\n   * @param {number} activeTileRow\n   * @param {number} activeTileCol\n   */\n  repositionKeypad(rect, activeTileRow, activeTileCol) {\n    if (!this.keypadEl) return;\n\n    if (activeTileRow < 4) {\n      this.keypadEl.style.top = `${rect.top + rect.height / 2.0 + window.scrollY}px`;\n    } else {\n      this.keypadEl.style.top = `${rect.bottom - rect.height / 2.0 + window.scrollY - this.keypadEl.clientHeight}px`;\n    }\n\n    if (activeTileCol < 4) {\n      this.keypadEl.style.left = `${rect.right - rect.width / 2.0 + window.scrollX}px`;\n    } else {\n      this.keypadEl.style.left = `${rect.left + rect.width / 2.0 + window.scrollX - this.keypadEl.clientWidth}px`;\n    }\n  }\n\n  /**\n   * Checks if a tile can be filled with a given value.\n   *\n   * @param {number} row\n   * @param {number} col\n   * @param {number} value\n   */\n  isValidMove(row, col, value) {\n    const board = this.sudoku.board;\n\n    // Check row\n    for (let c = 0; c < 9; c++) {\n      if (board[row][c].value === value && c !== col) return false;\n    }\n\n    // Check column\n    for (let r = 0; r < 9; r++) {\n      if (board[r][col].value === value && r !== row) return false;\n    }\n\n    // Check 3x3 box\n    const startRow = 3 * Math.floor(row / 3);\n    const startCol = 3 * Math.floor(col / 3);\n    for (let r = startRow; r < startRow + 3; r++) {\n      for (let c = startCol; c < startCol + 3; c++) {\n        if (board[r][c].value === value && r !== row && c !== col) return false;\n      }\n    }\n\n    return true;\n  }\n}\n","export { default as Sudoku } from './sudoku';\nexport { default as Tile } from './tile';\n","import Tile from './tile';\n\nexport default class Sudoku {\n  /**\n   * @param {HTMLElement} element\n   * @param {number[][]} initialValues\n   */\n  constructor(element) {\n    this.element = element;\n    this.board = Array.from({ length: 9 }, () => Array(9).fill(null));\n  }\n\n  /**\n   * Restarts the Sudoku board with the given initial values.\n   *\n   * @param {number[][]} initialValues\n   */\n  restart(initialValues) {\n    this.board = Array.from({ length: 9 }, () => Array(9).fill(null));\n\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        let tile;\n\n        if (initialValues && initialValues[row] && initialValues[row][col]) {\n          tile = new Tile(row, col, initialValues[row][col]);\n        } else {\n          tile = new Tile(row, col, null);\n        }\n\n        this.board[row][col] = tile;\n      }\n    }\n  }\n\n  render() {\n    const boardDiv = document.createElement('div');\n    boardDiv.classList.add('board');\n\n    // First, we generate divs for each 3x3 box.\n    for (let boardRow = 0; boardRow < 3; boardRow++) {\n      const boardRowDiv = document.createElement('div');\n      boardRowDiv.classList.add('board-row');\n      boardDiv.appendChild(boardRowDiv);\n\n      for (let boardCol = 0; boardCol < 3; boardCol++) {\n        const boxDiv = document.createElement('div');\n        boxDiv.classList.add('box');\n        boardRowDiv.appendChild(boxDiv);\n\n        // Then we generate the 9 tiles inside each 3x3 box.\n        for (let boxRow = 0; boxRow < 3; boxRow++) {\n          const boxRowDiv = document.createElement('div');\n          boxRowDiv.classList.add('box-row');\n          boxDiv.appendChild(boxRowDiv);\n\n          for (let boxCol = 0; boxCol < 3; boxCol++) {\n            const row = 3 * boardRow + boxRow;\n            const col = 3 * boardCol + boxCol;\n            const tileDiv = this.board[row][col].render();\n            boxRowDiv.appendChild(tileDiv);\n          }\n        }\n      }\n    }\n\n    return boardDiv;\n  }\n\n  update() {\n    const newBoard = this.render();\n\n    const parentElement = this.element.parentNode;\n    parentElement.removeChild(this.element);\n\n    this.element = newBoard;\n    parentElement.appendChild(this.element);\n  }\n}\n","export default class Tile {\n  /**\n   * @param {number} row\n   * @param {number} col\n   * @param {number} value\n   */\n  constructor(row, col, value) {\n    this.row = row;\n    this.col = col;\n    this.value = value;\n    this.element = null;\n    this.pencilMarks = [];\n  }\n\n  render() {\n    const tileEl = document.createElement('div');\n    tileEl.classList.add('tile');\n\n    if (this.value) {\n      tileEl.textContent = this.value;\n    }\n\n    this.element = tileEl;\n    return tileEl;\n  }\n}\n"],"names":["$710399a0f3bd0a12$export$2e2bcd8739ae039","constructor","row","col","value","element","pencilMarks","render","tileEl","document","createElement","classList","add","textContent","$043f643f06a810b4$export$2e2bcd8739ae039","board","Array","from","length","fill","restart","initialValues","tile","boardDiv","boardRow","boardRowDiv","appendChild","boardCol","boxDiv","boxRow","boxRowDiv","boxCol","tileDiv","update","newBoard","parentElement","parentNode","removeChild","$35da740d59af89ba$var$game","boardElement","sudoku","activeTileRow","activeTileCol","keypadEl","querySelector","start","updateSudoku","addListenersToKeypad","addListenersAndValidatorsToSudokuTiles","isInitial","addEventListener","toggleActivateTile","isValidMove","Boolean","remove","deactivateTile","rect","getBoundingClientRect","repositionKeypad","activeTile","e","key","target","dataset","parseInt","closest","style","top","height","window","scrollY","bottom","clientHeight","left","right","width","scrollX","clientWidth","c","r","startRow","Math","floor","startCol","SudokuGame","game","default","Sudoku","Tile"],"version":3,"file":"index.9ca90d99.js.map"}